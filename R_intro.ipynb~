{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] \"is visible ? \"\n"
     ]
    }
   ],
   "source": [
    "print(\"is visible ? \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>1</li>\n",
       "\t<li>2</li>\n",
       "\t<li>3</li>\n",
       "\t<li>4</li>\n",
       "\t<li>5</li>\n",
       "\t<li>6</li>\n",
       "\t<li>7</li>\n",
       "\t<li>8</li>\n",
       "\t<li>9</li>\n",
       "\t<li>10</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  1  2  3  4  5  6  7  8  9 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "1:10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "11"
      ],
      "text/latex": [
       "11"
      ],
      "text/markdown": [
       "11"
      ],
      "text/plain": [
       "[1] 11"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "5 + 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "25"
      ],
      "text/latex": [
       "25"
      ],
      "text/markdown": [
       "25"
      ],
      "text/plain": [
       "[1] 25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "5 ^ 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] 5\n"
     ]
    }
   ],
   "source": [
    "x <- 5\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "assign('name','sachin')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] \"sachin\"\n"
     ]
    }
   ],
   "source": [
    "print(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "?hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Installing package into 'C:/Users/hp/Documents/R/win-library/3.6'\n",
      "(as 'lib' is unspecified)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "package 'dplyr' successfully unpacked and MD5 sums checked\n",
      "\n",
      "The downloaded binary packages are in\n",
      "\tC:\\Users\\hp\\AppData\\Local\\Temp\\Rtmpe4q1Ed\\downloaded_packages\n"
     ]
    }
   ],
   "source": [
    "install.packages(\"dplyr\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: 'dplyr'\n",
      "\n",
      "The following objects are masked from 'package:stats':\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "The following objects are masked from 'package:base':\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(dplyr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#installed.packages()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "15"
      ],
      "text/latex": [
       "15"
      ],
      "text/markdown": [
       "15"
      ],
      "text/plain": [
       "[1] 15"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "abs(-15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "6.68950291344939e+198"
      ],
      "text/latex": [
       "6.68950291344939e+198"
      ],
      "text/markdown": [
       "6.68950291344939e+198"
      ],
      "text/plain": [
       "[1] 6.689503e+198"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "factorial(120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>0</li>\n",
       "\t<li>0.693147180559945</li>\n",
       "\t<li>1.09861228866811</li>\n",
       "\t<li>1.38629436111989</li>\n",
       "\t<li>1.6094379124341</li>\n",
       "\t<li>1.79175946922805</li>\n",
       "\t<li>1.94591014905531</li>\n",
       "\t<li>2.07944154167984</li>\n",
       "\t<li>2.19722457733622</li>\n",
       "\t<li>2.30258509299405</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0\n",
       "\\item 0.693147180559945\n",
       "\\item 1.09861228866811\n",
       "\\item 1.38629436111989\n",
       "\\item 1.6094379124341\n",
       "\\item 1.79175946922805\n",
       "\\item 1.94591014905531\n",
       "\\item 2.07944154167984\n",
       "\\item 2.19722457733622\n",
       "\\item 2.30258509299405\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0\n",
       "2. 0.693147180559945\n",
       "3. 1.09861228866811\n",
       "4. 1.38629436111989\n",
       "5. 1.6094379124341\n",
       "6. 1.79175946922805\n",
       "7. 1.94591014905531\n",
       "8. 2.07944154167984\n",
       "9. 2.19722457733622\n",
       "10. 2.30258509299405\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n",
       " [8] 2.0794415 2.1972246 2.3025851"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "log(1:10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>2.71828182845905</li>\n",
       "\t<li>7.38905609893065</li>\n",
       "\t<li>20.0855369231877</li>\n",
       "\t<li>54.5981500331442</li>\n",
       "\t<li>148.413159102577</li>\n",
       "\t<li>403.428793492735</li>\n",
       "\t<li>1096.63315842846</li>\n",
       "\t<li>2980.95798704173</li>\n",
       "\t<li>8103.08392757538</li>\n",
       "\t<li>22026.4657948067</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2.71828182845905\n",
       "\\item 7.38905609893065\n",
       "\\item 20.0855369231877\n",
       "\\item 54.5981500331442\n",
       "\\item 148.413159102577\n",
       "\\item 403.428793492735\n",
       "\\item 1096.63315842846\n",
       "\\item 2980.95798704173\n",
       "\\item 8103.08392757538\n",
       "\\item 22026.4657948067\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2.71828182845905\n",
       "2. 7.38905609893065\n",
       "3. 20.0855369231877\n",
       "4. 54.5981500331442\n",
       "5. 148.413159102577\n",
       "6. 403.428793492735\n",
       "7. 1096.63315842846\n",
       "8. 2980.95798704173\n",
       "9. 8103.08392757538\n",
       "10. 22026.4657948067\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]     2.718282     7.389056    20.085537    54.598150   148.413159\n",
       " [6]   403.428793  1096.633158  2980.957987  8103.083928 22026.465795"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "exp(1:10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>1</li>\n",
       "\t<li>-1</li>\n",
       "\t<li>1</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item -1\n",
       "\\item 1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. -1\n",
       "3. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  1 -1  1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cos(0:2*pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5 # scalar number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] 5\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " [1]  1  2  3  4  5  6  7  8  9 10\n"
     ]
    }
   ],
   "source": [
    "x = 1:10\n",
    "print(x) # vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      [,1] [,2] [,3] [,4] [,5]\n",
      " [1,]    1   21   41   61   81\n",
      " [2,]    2   22   42   62   82\n",
      " [3,]    3   23   43   63   83\n",
      " [4,]    4   24   44   64   84\n",
      " [5,]    5   25   45   65   85\n",
      " [6,]    6   26   46   66   86\n",
      " [7,]    7   27   47   67   87\n",
      " [8,]    8   28   48   68   88\n",
      " [9,]    9   29   49   69   89\n",
      "[10,]   10   30   50   70   90\n",
      "[11,]   11   31   51   71   91\n",
      "[12,]   12   32   52   72   92\n",
      "[13,]   13   33   53   73   93\n",
      "[14,]   14   34   54   74   94\n",
      "[15,]   15   35   55   75   95\n",
      "[16,]   16   36   56   76   96\n",
      "[17,]   17   37   57   77   97\n",
      "[18,]   18   38   58   78   98\n",
      "[19,]   19   39   59   79   99\n",
      "[20,]   20   40   60   80  100\n"
     ]
    }
   ],
   "source": [
    "x = matrix(1:100,20,5) # matrix \n",
    "# a = np.arange(1,101).reshape(20,5)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'world'"
      ],
      "text/latex": [
       "'world'"
      ],
      "text/markdown": [
       "'world'"
      ],
      "text/plain": [
       "[1] \"world\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "s = \"\n",
    "world\"\n",
    "\n",
    "substr(s,7,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'hello'"
      ],
      "text/latex": [
       "'hello'"
      ],
      "text/markdown": [
       "'hello'"
      ],
      "text/plain": [
       "[1] \"hello\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "substr(s,1,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 30 31 32 33 34\n",
      "[26] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n"
     ]
    }
   ],
   "source": [
    "a = 1:20\n",
    "b = 30:50\n",
    "c = c(a,b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>'a'</li>\n",
       "\t<li>'b'</li>\n",
       "\t<li>'c'</li>\n",
       "\t<li>'lst'</li>\n",
       "\t<li>'name'</li>\n",
       "\t<li>'s'</li>\n",
       "\t<li>'x'</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'lst'\n",
       "\\item 'name'\n",
       "\\item 's'\n",
       "\\item 'x'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'b'\n",
       "3. 'c'\n",
       "4. 'lst'\n",
       "5. 'name'\n",
       "6. 's'\n",
       "7. 'x'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"a\"    \"b\"    \"c\"    \"lst\"  \"name\" \"s\"    \"x\"   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>'a'</li>\n",
       "\t<li>'b'</li>\n",
       "\t<li>'c'</li>\n",
       "\t<li>'lst'</li>\n",
       "\t<li>'name'</li>\n",
       "\t<li>'s'</li>\n",
       "\t<li>'x'</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'lst'\n",
       "\\item 'name'\n",
       "\\item 's'\n",
       "\\item 'x'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'b'\n",
       "3. 'c'\n",
       "4. 'lst'\n",
       "5. 'name'\n",
       "6. 's'\n",
       "7. 'x'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"a\"    \"b\"    \"c\"    \"lst\"  \"name\" \"s\"    \"x\"   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "objects()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "rm(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>'b'</li>\n",
       "\t<li>'c'</li>\n",
       "\t<li>'lst'</li>\n",
       "\t<li>'name'</li>\n",
       "\t<li>'s'</li>\n",
       "\t<li>'x'</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'lst'\n",
       "\\item 'name'\n",
       "\\item 's'\n",
       "\\item 'x'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'c'\n",
       "3. 'lst'\n",
       "4. 'name'\n",
       "5. 's'\n",
       "6. 'x'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"b\"    \"c\"    \"lst\"  \"name\" \"s\"    \"x\"   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'G:/Sachin/Batches/SummerInternBatch2019/Batch10_30/R_language'"
      ],
      "text/latex": [
       "'G:/Sachin/Batches/SummerInternBatch2019/Batch10\\_30/R\\_language'"
      ],
      "text/markdown": [
       "'G:/Sachin/Batches/SummerInternBatch2019/Batch10_30/R_language'"
      ],
      "text/plain": [
       "[1] \"G:/Sachin/Batches/SummerInternBatch2019/Batch10_30/R_language\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "save(x,file=\"matrix.rdata\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "rm(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in eval(expr, envir, enclos): object 'x' not found\n",
     "output_type": "error",
     "traceback": [
      "Error in eval(expr, envir, enclos): object 'x' not found\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "load(\"matrix.rdata\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tbody>\n",
       "\t<tr><td> 1 </td><td>21 </td><td>41 </td><td>61 </td><td> 81</td></tr>\n",
       "\t<tr><td> 2 </td><td>22 </td><td>42 </td><td>62 </td><td> 82</td></tr>\n",
       "\t<tr><td> 3 </td><td>23 </td><td>43 </td><td>63 </td><td> 83</td></tr>\n",
       "\t<tr><td> 4 </td><td>24 </td><td>44 </td><td>64 </td><td> 84</td></tr>\n",
       "\t<tr><td> 5 </td><td>25 </td><td>45 </td><td>65 </td><td> 85</td></tr>\n",
       "\t<tr><td> 6 </td><td>26 </td><td>46 </td><td>66 </td><td> 86</td></tr>\n",
       "\t<tr><td> 7 </td><td>27 </td><td>47 </td><td>67 </td><td> 87</td></tr>\n",
       "\t<tr><td> 8 </td><td>28 </td><td>48 </td><td>68 </td><td> 88</td></tr>\n",
       "\t<tr><td> 9 </td><td>29 </td><td>49 </td><td>69 </td><td> 89</td></tr>\n",
       "\t<tr><td>10 </td><td>30 </td><td>50 </td><td>70 </td><td> 90</td></tr>\n",
       "\t<tr><td>11 </td><td>31 </td><td>51 </td><td>71 </td><td> 91</td></tr>\n",
       "\t<tr><td>12 </td><td>32 </td><td>52 </td><td>72 </td><td> 92</td></tr>\n",
       "\t<tr><td>13 </td><td>33 </td><td>53 </td><td>73 </td><td> 93</td></tr>\n",
       "\t<tr><td>14 </td><td>34 </td><td>54 </td><td>74 </td><td> 94</td></tr>\n",
       "\t<tr><td>15 </td><td>35 </td><td>55 </td><td>75 </td><td> 95</td></tr>\n",
       "\t<tr><td>16 </td><td>36 </td><td>56 </td><td>76 </td><td> 96</td></tr>\n",
       "\t<tr><td>17 </td><td>37 </td><td>57 </td><td>77 </td><td> 97</td></tr>\n",
       "\t<tr><td>18 </td><td>38 </td><td>58 </td><td>78 </td><td> 98</td></tr>\n",
       "\t<tr><td>19 </td><td>39 </td><td>59 </td><td>79 </td><td> 99</td></tr>\n",
       "\t<tr><td>20 </td><td>40 </td><td>60 </td><td>80 </td><td>100</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{lllll}\n",
       "\t  1  & 21  & 41  & 61  &  81\\\\\n",
       "\t  2  & 22  & 42  & 62  &  82\\\\\n",
       "\t  3  & 23  & 43  & 63  &  83\\\\\n",
       "\t  4  & 24  & 44  & 64  &  84\\\\\n",
       "\t  5  & 25  & 45  & 65  &  85\\\\\n",
       "\t  6  & 26  & 46  & 66  &  86\\\\\n",
       "\t  7  & 27  & 47  & 67  &  87\\\\\n",
       "\t  8  & 28  & 48  & 68  &  88\\\\\n",
       "\t  9  & 29  & 49  & 69  &  89\\\\\n",
       "\t 10  & 30  & 50  & 70  &  90\\\\\n",
       "\t 11  & 31  & 51  & 71  &  91\\\\\n",
       "\t 12  & 32  & 52  & 72  &  92\\\\\n",
       "\t 13  & 33  & 53  & 73  &  93\\\\\n",
       "\t 14  & 34  & 54  & 74  &  94\\\\\n",
       "\t 15  & 35  & 55  & 75  &  95\\\\\n",
       "\t 16  & 36  & 56  & 76  &  96\\\\\n",
       "\t 17  & 37  & 57  & 77  &  97\\\\\n",
       "\t 18  & 38  & 58  & 78  &  98\\\\\n",
       "\t 19  & 39  & 59  & 79  &  99\\\\\n",
       "\t 20  & 40  & 60  & 80  & 100\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "|  1  | 21  | 41  | 61  |  81 |\n",
       "|  2  | 22  | 42  | 62  |  82 |\n",
       "|  3  | 23  | 43  | 63  |  83 |\n",
       "|  4  | 24  | 44  | 64  |  84 |\n",
       "|  5  | 25  | 45  | 65  |  85 |\n",
       "|  6  | 26  | 46  | 66  |  86 |\n",
       "|  7  | 27  | 47  | 67  |  87 |\n",
       "|  8  | 28  | 48  | 68  |  88 |\n",
       "|  9  | 29  | 49  | 69  |  89 |\n",
       "| 10  | 30  | 50  | 70  |  90 |\n",
       "| 11  | 31  | 51  | 71  |  91 |\n",
       "| 12  | 32  | 52  | 72  |  92 |\n",
       "| 13  | 33  | 53  | 73  |  93 |\n",
       "| 14  | 34  | 54  | 74  |  94 |\n",
       "| 15  | 35  | 55  | 75  |  95 |\n",
       "| 16  | 36  | 56  | 76  |  96 |\n",
       "| 17  | 37  | 57  | 77  |  97 |\n",
       "| 18  | 38  | 58  | 78  |  98 |\n",
       "| 19  | 39  | 59  | 79  |  99 |\n",
       "| 20  | 40  | 60  | 80  | 100 |\n",
       "\n"
      ],
      "text/plain": [
       "      [,1] [,2] [,3] [,4] [,5]\n",
       " [1,]  1   21   41   61    81 \n",
       " [2,]  2   22   42   62    82 \n",
       " [3,]  3   23   43   63    83 \n",
       " [4,]  4   24   44   64    84 \n",
       " [5,]  5   25   45   65    85 \n",
       " [6,]  6   26   46   66    86 \n",
       " [7,]  7   27   47   67    87 \n",
       " [8,]  8   28   48   68    88 \n",
       " [9,]  9   29   49   69    89 \n",
       "[10,] 10   30   50   70    90 \n",
       "[11,] 11   31   51   71    91 \n",
       "[12,] 12   32   52   72    92 \n",
       "[13,] 13   33   53   73    93 \n",
       "[14,] 14   34   54   74    94 \n",
       "[15,] 15   35   55   75    95 \n",
       "[16,] 16   36   56   76    96 \n",
       "[17,] 17   37   57   77    97 \n",
       "[18,] 18   38   58   78    98 \n",
       "[19,] 19   39   59   79    99 \n",
       "[20,] 20   40   60   80   100 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
